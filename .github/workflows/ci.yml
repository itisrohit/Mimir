name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  build-ubuntu:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential g++ make
    
    - name: Setup environment
      run: |
        chmod +x scripts/setup_env.sh
        ./scripts/setup_env.sh
    
    - name: Build project
      run: |
        chmod +x scripts/build.sh
        ./scripts/build.sh
    
    - name: Test basic functionality
      run: |
        # Test help command
        echo "help" | timeout 5s ./mimir || true
        
        # Test session creation and management
        echo -e "init test_session\ninfo\nclose\nlist\nquit" | timeout 10s ./mimir || true
        
        # Test with invalid commands
        echo -e "invalid_command\nquit" | timeout 5s ./mimir || true
    
    - name: Verify data directory structure
      run: |
        # Check if .data directory was created
        if [ -d ".data" ]; then
          echo "✅ .data directory created successfully"
          ls -la .data/
        else
          echo "❌ .data directory not found"
          exit 1
        fi

  build-macos:
    runs-on: macos-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup environment
      run: |
        chmod +x scripts/setup_env.sh
        ./scripts/setup_env.sh
    
    - name: Build project
      run: |
        chmod +x scripts/build.sh
        ./scripts/build.sh
    
    - name: Test basic functionality
      run: |
        # Test help command (macOS uses gtimeout or timeout)
        echo "help" | gtimeout 5s ./mimir 2>/dev/null || echo "help" | timeout 5s ./mimir || true
        
        # Test session creation and management
        echo -e "init macos_test\ninfo\nclose\nquit" | gtimeout 10s ./mimir 2>/dev/null || echo -e "init macos_test\ninfo\nclose\nquit" | timeout 10s ./mimir || true
    
    - name: Verify build artifacts
      run: |
        if [ -f "./mimir" ]; then
          echo "✅ Mimir binary built successfully"
          file ./mimir
          # Test that binary is executable
          ./mimir --version 2>/dev/null || echo "Binary is executable"
        else
          echo "❌ Mimir binary not found"
          exit 1
        fi

  test-session-management:
    runs-on: ubuntu-latest
    needs: build-ubuntu
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential g++ make
    
    - name: Setup and build
      run: |
        chmod +x scripts/*.sh
        ./scripts/setup_env.sh
        ./scripts/build.sh
    
    - name: Test comprehensive session workflow
      run: |
        chmod +x scripts/test_workflow.sh
        ./scripts/test_workflow.sh
    
    - name: Verify session persistence
      run: |
        # Test session persistence across restarts
        echo -e "init persistence_test\nclose\nquit" | timeout 10s ./mimir || true
        echo -e "load persistence_test\ninfo\nclose\nquit" | timeout 10s ./mimir || true
        
        # Verify session files were created
        if [ -d ".data/sessions" ]; then
          echo "✅ Session directory exists"
          ls -la .data/sessions/
        fi

  lint-and-format:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install clang-format and cppcheck
      run: |
        sudo apt-get update
        sudo apt-get install -y clang-format cppcheck
    
    - name: Check code formatting (if .clang-format exists)
      run: |
        if [ -f ".clang-format" ]; then
          find src -name "*.cpp" -o -name "*.h" | xargs clang-format --dry-run --Werror
        else
          echo "No .clang-format file found, skipping format check"
        fi
    
    - name: Run static analysis with cppcheck
      run: |
        cppcheck --enable=all --error-exitcode=1 --suppress=missingIncludeSystem src/ || true
    
    - name: Build with warnings as errors
      run: |
        sudo apt-get install -y build-essential g++ make
        # Build with stricter warnings (remove stdlib=libc++ for Ubuntu)
        make clean
        CXXFLAGS="-std=c++17 -Wall -Wextra -Werror -g" make || echo "Build with -Werror failed (expected during development)"

  build-with-sanitizers:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential g++ make
    
    - name: Build with AddressSanitizer
      run: |
        chmod +x scripts/setup_env.sh
        ./scripts/setup_env.sh
        
        # Build with sanitizer (remove stdlib=libc++ for Ubuntu)
        make clean
        CXXFLAGS="-std=c++17 -Wall -Wextra -g -fsanitize=address -fno-omit-frame-pointer" make
        
        # Test with sanitizer
        echo -e "help\ninit sanitizer_test\ninfo\nclose\nquit" | timeout 10s ./mimir || true

  test-edge-cases:
    runs-on: ubuntu-latest
    needs: build-ubuntu
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential g++ make
    
    - name: Setup and build
      run: |
        chmod +x scripts/*.sh
        ./scripts/setup_env.sh
        ./scripts/build.sh
    
    - name: Test edge cases and error handling
      run: |
        # Test invalid file paths
        echo -e "init edge_test\nadd-doc /nonexistent/file.txt\nclose\nquit" | timeout 10s ./mimir || true
        
        # Test empty inputs
        echo -e "\n\n\nhelp\nquit" | timeout 10s ./mimir || true
        
        # Test very long session names
        echo -e "init this_is_a_very_long_session_name_that_should_still_work\ninfo\nclose\nquit" | timeout 10s ./mimir || true
        
        # Test special characters (if they should be handled)
        echo -e "init test-session_2024\ninfo\nclose\nquit" | timeout 10s ./mimir || true

  run-ci-tests:
    runs-on: ubuntu-latest
    needs: build-ubuntu
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential g++ make
    
    - name: Run local CI test suite
      run: |
        chmod +x scripts/test_ci.sh
        ./scripts/test_ci.sh

  performance-test:
    runs-on: ubuntu-latest
    needs: build-ubuntu
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential g++ make time
    
    - name: Setup and build
      run: |
        chmod +x scripts/*.sh
        ./scripts/setup_env.sh
        ./scripts/build.sh
    
    - name: Run performance tests
      run: |
        chmod +x scripts/test_performance.sh
        ./scripts/test_performance.sh