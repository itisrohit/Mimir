name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  build-nix:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Nix
      uses: cachix/install-nix-action@v23
      with:
        github_access_token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Build with Nix
      run: nix build
    
    - name: Run Nix flake checks
      run: nix flake check
    
    - name: Test development environment with PDF tools
      run: |
        nix develop --command bash -c "
          echo 'üîç Checking PDF tools in Nix environment...'
          which pdftotext || echo '‚ö†Ô∏è pdftotext not found'
          which tesseract || echo '‚ö†Ô∏è tesseract not found'
          which pdfinfo || echo '‚ö†Ô∏è pdfinfo not found'
          
          echo 'üî® Building and testing...'
          make clean && make
          
          echo 'üß™ Running basic functionality test...'
          echo 'help' | timeout 5s ./mimir || echo 'Basic test completed'
          
          echo 'üìÑ Testing document processing...'
          echo 'Test content for CI' > ci_test.txt
          echo -e 'init ci_test\nadd-doc ci_test.txt\ninfo\nquit' | timeout 10s ./mimir || echo 'Document test completed'
          
          echo '‚úÖ Nix development environment test completed'
        "

  build-ubuntu-traditional:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential g++ make
        # Install PDF processing tools for full testing
        sudo apt-get install -y poppler-utils tesseract-ocr
    
    - name: Build and test with traditional tools
      run: |
        chmod +x scripts/*.sh
        ./scripts/setup_env.sh
        ./scripts/build.sh
        ./scripts/test_ci.sh
        
        # Test PDF functionality if tools are available
        if command -v pdftotext >/dev/null 2>&1; then
          echo "‚úÖ PDF tools available for testing"
          echo "Testing PDF error handling..."
          echo -e "init pdf_ci_test\nadd-doc nonexistent.pdf\ninfo\nquit" | timeout 10s ./mimir || echo "PDF error handling test completed"
        else
          echo "‚ö†Ô∏è PDF tools not available in traditional build"
        fi

  build-macos:
    runs-on: macos-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Nix
      uses: cachix/install-nix-action@v23
      with:
        github_access_token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Build with Nix on macOS
      run: nix build
    
    - name: Test with Nix on macOS
      run: |
        nix develop --command bash -c "
          echo 'üçé Testing on macOS with Nix...'
          make clean && make
          
          echo 'üß™ Running macOS-specific tests...'
          echo 'help' | timeout 5s ./mimir || echo 'macOS basic test completed'
          
          # Test file path handling (important for macOS)
          echo 'macOS test content' > 'test file with spaces.txt'
          echo -e 'init macos_test\nadd-doc \"test file with spaces.txt\"\ninfo\nquit' | timeout 10s ./mimir || echo 'macOS file path test completed'
          
          echo '‚úÖ macOS testing completed'
        "

  test-pdf-functionality:
    runs-on: ubuntu-latest
    needs: build-nix
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Nix
      uses: cachix/install-nix-action@v23
      with:
        github_access_token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Test PDF processing capabilities
      run: |
        nix develop --command bash -c "
          echo 'üìÑ Testing PDF processing pipeline...'
          
          # Verify PDF tools are available
          pdftotext -v 2>&1 | head -1 || (echo '‚ùå pdftotext not available' && exit 1)
          tesseract --version 2>&1 | head -1 || (echo '‚ùå tesseract not available' && exit 1)
          
          echo '‚úÖ PDF tools verified'
          
          # Build and test PDF error handling
          make clean && make
          
          echo 'üß™ Testing PDF error handling...'
          echo -e 'init pdf_pipeline_test\nadd-doc nonexistent.pdf\ninfo\nquit' | timeout 15s ./mimir > pdf_test.log || echo 'PDF test completed'
          
          # Check for proper error messages
          if grep -q 'does not exist\|Failed to read' pdf_test.log; then
            echo '‚úÖ PDF error handling working correctly'
          else
            echo '‚ö†Ô∏è PDF error handling may need review'
            cat pdf_test.log
          fi
          
          echo 'üìä PDF functionality test completed'
        "

  integration-tests:
    runs-on: ubuntu-latest
    needs: [build-nix, build-ubuntu-traditional]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Nix
      uses: cachix/install-nix-action@v23
      with:
        github_access_token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Run comprehensive integration tests
      run: |
        nix develop --command bash -c "
          echo 'üîÑ Running comprehensive integration tests...'
          
          make clean && make
          chmod +x scripts/*.sh
          
          # Run all test suites
          ./scripts/test_workflow.sh
          
          echo '‚úÖ Integration tests completed successfully'
        "